### general settings

# overrides defaults in ~/.brutefir_defaults


sampling_rate:     48000;

filter_length:     2048,4;
float_bits:        32;

overflow_warnings: true;
allow_poll_mode:   false;
monitor_rate:      true;
powersave:         -80;
lock_memory:       true;
show_progress:     false;



### predic mandatory structure

# Do not change this part



logic:

# module "cli": telnet connection for command line control
"cli" { port: 3000; },

# module "eq": loads EQ curves. Used for tone control and loudness
"eq"  {
    debug_dump_filter: "~/brutefir-rendered-%d";
    {
     coeff: "c.eq";
     bands: 18.0, 20.0, 22.4, 25.0, 28.0, 32.0, 36.0, 40.0,
            44.8, 50.0, 56.0, 63.0, 71.0, 80.0, 90.0, 100.0,
            112.0, 126.0, 142.0, 160.0, 180.0, 200.0, 224.0, 250.0,
            280.0, 320.0, 360.0, 400.0, 448.0, 500.0, 560.0, 630.0,
            710.0, 800.0, 900.0, 1000.0, 1120.0, 1260.0, 1420.0, 1600.0,
            1800.0, 2000.0, 2240.0, 2500.0, 2800.0, 3200.0, 3600.0, 4000.0,
            4480.0, 5000.0, 5600.0, 6300.0, 7100.0, 8000.0, 9000.0, 10000.0,
            11200.0, 12600.0, 14200.0, 16000.0, 18000.0, 20000.0, 22040.0;
    };
};

# I/O

input "i.L", "i.R" {
	# initially without connection
	device: "jack" { };
	sample: "AUTO";
	channels: 2/0,1;
};


## coeffs


# EQ & loudness (generated)

coeff "c.eq" {
	filename: "dirac pulse";
	shared_mem: true;
    # enough for smooth EQ curve
	blocks: 1;
};


## filters


#VOL

filter "f.vol.L" {
  from_inputs:  "i.L";
  to_filters:   "f.eq.L", "f.eq.R";
  coeff:        -1;
};

filter "f.vol.R" {
  from_inputs:  "i.R";
  to_filters:   "f.eq.L", "f.eq.R";
  coeff:        -1;
};

#EQ

filter "f.eq.L" {
	from_filters: "f.vol.L"//1,"f.vol.R"//0;
	to_filters:   "f.drc.L";
	coeff:        "c.eq";
};

filter "f.eq.R" {
	from_filters: "f.vol.L"//0,"f.vol.R"//1;
	to_filters:   "f.drc.R";
	coeff:        "c.eq";
};

# ---> end of predic mandatory structure



### loudspeaker specific configuration

# configure your loudspeaker from here



# I/O

output "o.L.w", "o.R.w", "o.L.m", "o.R.m", "o.L.t", "o.R.t" {
	# mapping of 6 outputs
    # woofers on 0,1 outputs in order to not fry
    # tweeters by accident
	device: "jack" { ports:
	"system:playback_1"/"o.L.w", "system:playback_2"/"o.R.w";
	"system:playback_3"/"o.L.m", "system:playback_4"/"o.R.m";
	"system:playback_5"/"o.L.t", "system:playback_6"/"o.R.t";
	};
	sample:   "AUTO";
	channels: 6/0,1,2,3,4,5;
	maxdelay: 1000;
	dither:   true;
    # 'samples' that are equivalent in 'ms' to 0,0
	delay:    0,0;
};


## filters


# DRC

filter "f.drc.L" {
  from_filters: "f.eq.L";
	to_filters:   "f.xo.L.t","f.xo.L.m","f.xo.L.w";
	coeff:        -1;
};

filter "f.drc.R" {
  from_filters: "f.eq.R";
	to_filters:   "f.xo.R.t","f.xo.R.m","f.xo.R.w";
    # starts without DRC EQ
	coeff:        -1;
};

# XO

filter "f.xo.L.t" {
	from_filters: "f.drc.L";
	to_outputs:   "o.L.t"/0.0/1;
    # starts with mp XO-EQ
	coeff:        "c.xo.mp.t.L";
};

filter "f.xo.R.t" {
	from_filters: "f.drc.R";
	to_outputs:   "o.R.t"/0.0/1;
    # starts with mp XO-EQ
	coeff:        "c.xo.mp.t.R";
};

filter "f.m.L" {
	from_filters: "f.drc.L";
	to_outputs:   "o.L.m"/0.0/1;
    # starts with mp XO-EQ
	coeff:        "c.xo.mp.m.L";
};

filter "f.m.R" {
	from_filters: "f.drc.R";
	to_outputs:   "o.R.m"/0.0/1;
    # starts with mp XO-EQ
	coeff:        "c.xo.mp.m.R";
};

filter "f.xo.L.w" {
	from_filters: "f.drc.L";
	to_outputs:   "o.L.w"/0.0/1;
    # starts with mp XO-EQ
	coeff:        "c.xo.mp.w.L";
};

filter "f.xo.R.w" {
	from_filters: "f.drc.R";
	to_outputs:   "o.R.w"/0.0/1;
    # starts with mp XO-EQ
	coeff:        "c.xo.mp.w.R";
};


## coeffs


# DRC

coeff "c.drc.1.L" {
	filename:    "drc-1-L.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.drc.1.R" {
	filename:    "drc-1-R.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.drc.2.L" {
	filename:    "drc-2-L.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.drc.2.R" {
	filename:    "drc-2-R.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

# XO

coeff "c.xo.mp.t.L" {
	filename:    "xo-mp-t-L.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.mp.t.R" {
	filename:    "xo-mp-t-R.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.mp.m.L" {
	filename:    "xo-mp-m-L.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.mp.m.R" {
	filename:    "xo-mp-m-R.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.mp.w.L" {
	filename:    "xo-mp-w-L.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.mp.w.R" {
	filename:    "xo-mp-w-R.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.lp.t.L" {
	filename:    "xo-mp-t-L.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.lp.t.R" {
	filename:    "xo-lp-t-R.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.lp.m.L" {
	filename:    "xo-lp-m-L.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.lp.m.R" {
	filename:    "xo-lp-m-R.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.lp.w.L" {
	filename:    "xo-lp-w-L.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};

coeff "c.xo.lp.w.R" {
	filename:    "xo-lp-w-R.pcm";
	format:      "FLOAT_LE";
	shared_mem:  false;
	attenuation: 0;
};
